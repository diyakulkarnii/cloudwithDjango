from flask import Flask, render_template, redirect, url_for, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from flask_socketio import SocketIO, join_room, leave_room, emit

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///chat.db'
db = SQLAlchemy(app)
socketio = SocketIO(app, cors_allowed_origins="*")
login_manager = LoginManager(app)
login_manager.login_view = 'login'

# User model
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)

# Message model
class Message(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    sender_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    recipient_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    message = db.Column(db.Text, nullable=False)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/')
def home():
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username, password=password).first()
        if user:
            login_user(user)
            return redirect(url_for('chat'))
        return "Invalid credentials"
    return render_template('login.html')

@app.route('/signup', methods=['GET', 'POST'])
def signup():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if User.query.filter_by(username=username).first():
            return "Username already exists"
        new_user = User(username=username, password=password)
        db.session.add(new_user)
        db.session.commit()
        return redirect(url_for('login'))
    return render_template('signup.html')

@app.route('/chat')
@login_required
def chat():
    users = User.query.all()
    return render_template('chat.html', users=users, current_user=current_user)

# API to fetch chat history
@app.route('/messages/<int:recipient_id>')
@login_required
def messages(recipient_id):
    chat_history = Message.query.filter(
        ((Message.sender_id == current_user.id) & (Message.recipient_id == recipient_id)) |
        ((Message.sender_id == recipient_id) & (Message.recipient_id == current_user.id))
    ).all()
    return jsonify([{'sender': m.sender_id, 'message': m.message} for m in chat_history])

# WebSocket events
@socketio.on('send_message')
def handle_send_message(data):
    recipient_id = data['recipient_id']
    message = data['message']
    new_message = Message(sender_id=current_user.id, recipient_id=recipient_id, message=message)
    db.session.add(new_message)
    db.session.commit()
    emit('receive_message', {'sender_id': current_user.id, 'message': message}, room=str(recipient_id))

@socketio.on('join')
def handle_join(data):
    room = str(data['room'])
    join_room(room)

@socketio.on('leave')
def handle_leave(data):
    room = str(data['room'])
    leave_room(room)

if __name__ == '__main__':
    db.create_all()
    socketio.run(app, debug=True)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Application</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.1/socket.io.js"></script>
</head>
<body>
    <div class="chat-container">
        <div class="users-list">
            <h3>Users</h3>
            <ul>
                {% for user in users %}
                {% if user.id != current_user.id %}
                <li onclick="selectUser({{ user.id }}, '{{ user.username }}')">
                    {{ user.username }}
                </li>
                {% endif %}
                {% endfor %}
            </ul>
        </div>
        <div class="chat-box">
            <div id="chat-messages"></div>
            <input type="text" id="chat-input" placeholder="Type a message..." onkeypress="sendMessage(event)">
        </div>
    </div>
    <script>
        const socket = io();
        let recipientId = null;

        function selectUser(id, username) {
            recipientId = id;
            document.getElementById('chat-messages').innerHTML = '';
            fetch(`/messages/${id}`)
                .then(res => res.json())
                .then(messages => {
                    messages.forEach(msg => {
                        const sender = msg.sender === {{ current_user.id }} ? 'You' : username;
                        const messageDiv = document.createElement('div');
                        messageDiv.textContent = `${sender}: ${msg.message}`;
                        document.getElementById('chat-messages').appendChild(messageDiv);
                    });
                });
            socket.emit('join', { room: id });
        }

        function sendMessage(event) {
            if (event.key === 'Enter' && recipientId) {
                const input = document.getElementById('chat-input');
                const message = input.value;
                socket.emit('send_message', { recipient_id: recipientId, message });
                input.value = '';
                const messageDiv = document.createElement('div');
                messageDiv.textContent = `You: ${message}`;
                document.getElementById('chat-messages').appendChild(messageDiv);
            }
        }

        socket.on('receive_message', data => {
            if (data.sender_id === recipientId) {
                const messageDiv = document.createElement('div');
                messageDiv.textContent = `Them: ${data.message}`;
                document.getElementById('chat-messages').appendChild(messageDiv);
            }
        });
    </script>
</body>
</html>
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    height: 100vh;
}

.chat-container {
    display: flex;
    width: 100%;
}

.users-list {
    width: 20%;
    background: #f4f4f4;
    padding: 10px;
    border-right: 1px solid #ddd;
}

.users-list h3 {
    margin-top: 0;
}

.users-list ul {
    list-style: none;
    padding: 0;
}

.users-list li {
    padding: 10px;
    cursor: pointer;
    border-bottom: 1px solid #ddd;
}

.chat-box {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
}

#chat-messages {
    flex-grow: 1;
    padding: 10px;
    overflow-y: auto;
    border-bottom: 1px solid #ddd;
}

#chat-input {
    width: 100%;
    padding: 10px;
    border: none;
    border-top: 1px solid #ddd;
    outline: none;
}
